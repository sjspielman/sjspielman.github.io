<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-27T12:10:08-04:00</updated><id>http://localhost:4000/</id><title type="html">Home</title><subtitle>Institute for Genomics and Evolutionary Medicine
</subtitle><author><name>Stephanie J. Spielman, PhD</name></author><entry><title type="html">Twitter must be a force for good</title><link href="http://localhost:4000/2015/07/13/twitter-smbe.html" rel="alternate" type="text/html" title="Twitter must be a force for good" /><published>2015-07-13T00:00:00-04:00</published><updated>2015-07-13T00:00:00-04:00</updated><id>http://localhost:4000/2015/07/13/twitter-smbe</id><content type="html" xml:base="http://localhost:4000/2015/07/13/twitter-smbe.html">&lt;p&gt;Day Two of SMBE 2015 in Vienna is winding down, and things are going pretty great - well, almost. In this new grand age of the 21st century, roughly half of what I have learned so far at this conference has come from Twitter, either directing me to a talk/poster I didn’t know about yet, or sharing insights from talks I didn’t get a chance to attend. Twitter really is a powerful tool, and one that should be used as a “force for good.” Indeed, the &lt;strong&gt;vast&lt;/strong&gt; majority of tweets I’ve seen from &lt;a href=&quot;https://twitter.com/hashtag/smbe15?src=hash&amp;amp;vertical=default&amp;amp;f=tweets&quot;&gt;#smbe15&lt;/a&gt; have been helpful, informative, and fun. But, I’ve seen a few that we could really do without.&lt;/p&gt;

&lt;p&gt;More specifically, more than a few &lt;a href=&quot;https://twitter.com/hashtag/smbe15?src=hash&amp;amp;vertical=default&amp;amp;f=tweets&quot;&gt;#smbe15&lt;/a&gt; tweets (enough to catch my eye) have been really critical, and not necessarily constructively,  about talks that the “tweeter” didn’t like. In some cases, senior and/or well-established scientists seemed to be using twitter as an open forum to point out specific talks or presentation styles they didn’t feel were worthy or done correctly. As a graduate student trying to network and pave a career for myself, I was pretty worried when I saw these tweets. Would these scientists also tweet negative remarks about my talk? Will my research be de-valued because some tenured professor made a snarky comment? Thankfully, I didn’t see any mocking tweets after my talk, but there were a few tweets where I thought to myself, “Wait…was that about me?” Not a good feeling.&lt;/p&gt;

&lt;p&gt;Let me be clear - these tweets are in the minority, but at least 10-15 tweets have fallen into this category, which in my book is way too many. Even so, seeing several leading scientists publicly share and effectively sign their names to negative remarks about others’ talks or posters was incredibly discouraging. I haven’t seen any tweets outright saying “Hey, Person X! You’re talk was dumb!”, but I have seen a lot of tweets with an excessively mocking and/or ostracizing tone.&lt;/p&gt;

&lt;p&gt;I’m not suggesting that the scientific community should avoid looking at others’ work with a critical eye, but I &lt;em&gt;am&lt;/em&gt; suggesting (nay, requesting) that public tweets be respectful and supportive. If you have something that doesn’t fit into those categories but that, nevertheless, you feel must be said, it would be a much more productive strategy to actually &lt;strong&gt;go find and talk with&lt;/strong&gt; the person! We’re at a conference, after all. Having real conversations with real people seems like an overall better approach than does cryptically tweeting your thoughts about things you don’t like. Plus, 140 characters can’t do those sorts of conversations justice and leaves you vulnerable to strong misunderstandings. Indeed, maybe I’ve miscalculated the whole thing and I am incredibly wrong about all the seemingly inappropriate tweets I saw! …Which is exactly my point.&lt;/p&gt;

&lt;p&gt;Twitter should be a place to collaborate, share, and engage respectfully - not a convenient place for accusing or pointing fingers ar people. After all, what young scientist wants to join a community with a thriving culture of cyber snark?&lt;/p&gt;</content><author><name>Stephanie J. Spielman, PhD</name></author><summary type="html">Day Two of SMBE 2015 in Vienna is winding down, and things are going pretty great - well, almost. In this new grand age of the 21st century, roughly half of what I have learned so far at this conference has come from Twitter, either directing me to a talk/poster I didn’t know about yet, or sharing insights from talks I didn’t get a chance to attend. Twitter really is a powerful tool, and one that should be used as a “force for good.” Indeed, the vast majority of tweets I’ve seen from #smbe15 have been helpful, informative, and fun. But, I’ve seen a few that we could really do without.</summary></entry><entry><title type="html">Brief Introduction to Pyvolve</title><link href="http://localhost:4000/2015/06/01/pyvolve-tutorial.html" rel="alternate" type="text/html" title="Brief Introduction to Pyvolve" /><published>2015-06-01T00:00:00-04:00</published><updated>2015-06-01T00:00:00-04:00</updated><id>http://localhost:4000/2015/06/01/pyvolve-tutorial</id><content type="html" xml:base="http://localhost:4000/2015/06/01/pyvolve-tutorial.html">&lt;h1 id=&quot;brief-introduction-to-pyvolve&quot;&gt;Brief introduction to Pyvolve&lt;/h1&gt;

&lt;p&gt;This blog post contains a brief tutorial for &lt;a href=&quot;http://sjspielman.org/pyvolve&quot;&gt;Pyvolve&lt;/a&gt;, an open-source Python module for simulating sequences along phylogenies (&lt;a href=&quot;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0139047&quot;&gt;Spielman and Wilke, 2015&lt;/a&gt;). A comprehensive user-manual for Pyvolve is available with the most recent release from this &lt;a href=&quot;https://github.com/sjspielman/pyvolve&quot;&gt;github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pyvolve is written in pure Python, with dependencies of NumPy, SciPy, and Biopython. The Pyvolve framework is extremely flexible, allowing you to simulate sequences according to virtually all standard models of nucleotide, amino acid, and codon data, and you can customize &lt;em&gt;all&lt;/em&gt; model parameters to your heart’s content. Further, Pyvolve allows you to provide a custom rate matrix, if the available models are not quite what you’re looking for (however, please feel free to get in touch with me if you would like to request that a new model be included!).&lt;/p&gt;

&lt;p&gt;Pyvolve incorporates both site and temporal heterogeneity, and, as you’ll see in the preprint linked above, contains several novel simulation features. Below, I show some simple examples of Pyvolve simulations. In general, sequence simulations require several you to do a few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Specify a phylogeny (with branch lengths!)&lt;/li&gt;
  &lt;li&gt;Define any evolutionary model(s) to use. In Pyvolve, these are &lt;strong&gt;Model&lt;/strong&gt; objects.&lt;/li&gt;
  &lt;li&gt;Assign model(s) to partition(s). In Pyvolve, these are &lt;strong&gt;Partition&lt;/strong&gt; objects.&lt;/li&gt;
  &lt;li&gt;Evolve, using the callable &lt;strong&gt;Evolver&lt;/strong&gt; class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Partitions are essentially a convenient way of defining “domains” – each partition can evolve according to a distinct evolutionary model (provided that all partitions evolve the same state, e.g. nucleotides, amino acids, or codons), and each partition can have differing degrees of heterogeneity.&lt;/p&gt;

&lt;p&gt;Examples shown below are minimal and do not capture the full power of Pyvolve – to really see what Pyvolve can do, have a look at the &lt;a href=&quot;https://github.com/sjspielman/pyvolve/raw/master/user_manual/pyvolve_manual.pdf&quot;&gt;user manual&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;simulating-nucleotide-sequences&quot;&gt;Simulating nucleotide sequences&lt;/h2&gt;

&lt;p&gt;This simple example demonstrates how to evolve nucleotide sequences.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyvolve&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define a phylogeny, from a file containing a newick tree&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyvolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file_with_tree.tre&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define a nucleotide model, as a Model object.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nucleotide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Assign the model to a Partition. The size argument indicates to evolve 250 positions&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Evolve!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_evolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Evolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_evolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
The code shown above will simulate a nucleotide alignment of 250 positions along the phylogeny provided in &lt;code class=&quot;highlighter-rouge&quot;&gt;file_with_tree.tre&lt;/code&gt;. This code simulates nucleotides according to default parameters: mutation rates among nucleotides are equal, and nucleotide equilibrium frequencies are equal at 0.25 each. We can customize these parameters by adding a &lt;em&gt;second argument to Model&lt;/em&gt;: a dictionary of parameters to customize.&lt;/p&gt;

&lt;p&gt;To customize mutation rates, we can use the key &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;mu&quot;&lt;/code&gt;. This key should have an associated value of a dictionary of mutation rates. Mutation rates are symmetric, denotated by keys &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;AT&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;AC&quot;&lt;/code&gt;, etc. (where “AT” is the rate from A to T, and conversely T to A). To customize frequencies, we can use the key &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;state_freqs&quot;&lt;/code&gt;, whose associated value should be a list/numpy array of frequencies ordered ACGT.&lt;/p&gt;

&lt;p&gt;This code chunk simulates nucleotide sequences with customized parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyvolve&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define a phylogeny, from a file containing a newick tree&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyvolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file_with_tree.tre&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define a nucleotide model with custom parameters!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# f(A) = 0.25, f(C) = 0.3, etc.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nucleotide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;state_freqs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Assign the model to a Partition.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Evolve!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_evolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Evolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_evolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For those of you who, like myself, tend towards some minor, completely socially-acceptable laziness, you can alternatively specify mutation rates with simply the key &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;kappa&quot;&lt;/code&gt;, which represents the transition-to-transversion bias. Here’s how to define such a model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Define a nucleotide model kappa&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# f(A) = 0.25, f(C) = 0.3, etc.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nucleotide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kappa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;state_freqs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Now we’re cookin’! Let’s add some more bells and whistles, like &lt;em&gt;rate heterogeneity&lt;/em&gt;. In the simulations shown above, all positions evolve according to exactly the same model and the same rate. We can incorporate rate heterogeneity by adding a few &lt;em&gt;keyword arguments&lt;/em&gt; when defining our Model object. In this example, we will specify rate heterogeneity with a custom distribution, although as you’ll see in the &lt;a href=&quot;https://github.com/sjspielman/pyvolve/raw/master/user_manual/pyvolve_manual.pdf&quot;&gt;user manual&lt;/a&gt;, you can also specify that rates be distribution according to a gamma distribution.&lt;/p&gt;

&lt;p&gt;To implement rate heterogeneity (this holds for nucleotide and amino-acid models!), you need to specify the &lt;em&gt;scalar factors&lt;/em&gt; which govern the heterogeneity, and a list of &lt;em&gt;probabilities&lt;/em&gt; associated with each factor. This list will determine the probability that a given site evolves according to the associated factor. (Note that if you don’t specify these probabilties, each category will be equally likely).&lt;/p&gt;

&lt;p&gt;Let’s go ahead and add in four rate categories, some slow and some fast, with associated probabilities. Specify a list of rate factors with the argument &lt;code class=&quot;highlighter-rouge&quot;&gt;rate_factors&lt;/code&gt;, and specify a list of probabilities with the argument &lt;code class=&quot;highlighter-rouge&quot;&gt;rate_probs&lt;/code&gt; (should sum to 1!). These lists are associated 1:1, as in the first item in &lt;code class=&quot;highlighter-rouge&quot;&gt;rate_factors&lt;/code&gt; will have a probability equal to the first item in &lt;code class=&quot;highlighter-rouge&quot;&gt;rate_probs&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyvolve&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define a phylogeny, from a file containing a newick tree&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyvolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file_with_tree.tre&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define our parameters&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# f(A) = 0.25, f(C) = 0.3, etc.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Two fast categories, and two slow categories&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;probs&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# The fast rates will occur with relatively low probabilities&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define our model with all parameters&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nucleotide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;state_freqs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate_factors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate_probs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Assign the model to a Partition.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Evolve!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_evolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Evolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_evolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default, Pyvolve outputs several files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simulated_alignment.fasta&lt;/li&gt;
  &lt;li&gt;site_rates.txt&lt;/li&gt;
  &lt;li&gt;site_rates_info.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first file contains the simulated alignment, and the latter two files contain information about site-specific rates and/or parameters. Using these two files, you can determine at which rate each site evolved. Note that you can suppress the creation of or change the name of these files with certain arguments when &lt;em&gt;calling&lt;/em&gt; your Evolver object – see the user manual!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; And finally, one more example - what if we wanted to use &lt;em&gt;multiple models&lt;/em&gt; in our simulation? For this task, we’ll need to define multiple Partition objects. In the example below, one Partition object will be assigned default parameters, and one Partition will be assigned custom parameters.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyvolve&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define a phylogeny, from a file containing a newick tree&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyvolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file_with_tree.tre&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define default model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nucleotide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define customized model (notice, no site heterogeneity this time!)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# f(A) = 0.25, f(C) = 0.3, etc.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nucleotide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;state_freqs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Assign each model to a Partition.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Evolve by providing both partitions in a list to Evolver&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_evolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Evolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_evolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the resulting sequence file, the first 100 positions will have evolved according to &lt;code class=&quot;highlighter-rouge&quot;&gt;model1&lt;/code&gt;, and the next 200 positions (there will be a total of 300 positions!) will evolve according to &lt;code class=&quot;highlighter-rouge&quot;&gt;model2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more, yes more!, ways to use Pyvolve, check out the (drumroll…) &lt;a href=&quot;https://github.com/sjspielman/pyvolve/raw/master/user_manual/pyvolve_manual.pdf&quot;&gt;user manual&lt;/a&gt;! Please feel free to post any questions and/or file bug reports on Pyvolve’s github repository Issues section. Enjoy!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Stephanie J. Spielman, PhD</name></author><summary type="html">Brief introduction to Pyvolve</summary></entry><entry><title type="html">Configuring Yosemite for Biocomputing</title><link href="http://localhost:4000/2015/04/03/setup-yosemite.html" rel="alternate" type="text/html" title="Configuring Yosemite for Biocomputing" /><published>2015-04-03T00:00:00-04:00</published><updated>2015-04-03T00:00:00-04:00</updated><id>http://localhost:4000/2015/04/03/setup-yosemite</id><content type="html" xml:base="http://localhost:4000/2015/04/03/setup-yosemite.html">&lt;p&gt;&lt;strong&gt;If you are having issues with&lt;/strong&gt; &lt;em&gt;El Capitan&lt;/em&gt;, &lt;strong&gt;you may want to check out &lt;a href=&quot;http://www.benjack.io/2016/01/02/el-capitan-biocomputing.html&quot;&gt;this blog post&lt;/a&gt; or &lt;a href=&quot;https://ohthehugemanatee.org/blog/2015/10/01/how-i-got-el-capitain-working-with-my-developer-tools/&quot;&gt;this blog post&lt;/a&gt; instead!&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I recently got myself the new 2015 Macbook Pro, and so far it’s been great - especially considering that my old laptop’s battery only held a charge for a whopping 2.5 hours. Now, 4 hours since the last charge, I still have 8 hours of battery life remaining. The world is my oyster!&lt;/p&gt;

&lt;p&gt;In any case, the first thing I did with the new computer was set up my biocomputing environment, and in my at-long-last-achieved-wisdom, I saved all the steps I took to get my computer up-and-running, and here it is! Bear in mind that these are the steps that I took, and they may or may not work for you.&lt;/p&gt;

&lt;h3 id=&quot;step-by-step-guide-to-a-configuring-a-biocomputing-environment&quot;&gt;Step-by-step guide to a configuring a Biocomputing environment&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Download XCode from the App Store. This will give you the basics you need to proceed, like clang/clang++ compilers, git, and other goodies. However, note that XCode won’t give you a fortran compiler. The quickest option for getting one is to download and install from this link: &lt;a href=&quot;http://r.research.att.com/libs/gfortran-4.8.2-darwin13.tar.bz2&quot;&gt;http://r.research.att.com/libs/gfortran-4.8.2-darwin13.tar.bz2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; XCode comes with it’s own text editor, although I am partial to TextWrangler (available here: &lt;a href=&quot;http://www.barebones.com/products/textwrangler/download.html&quot;&gt;http://www.barebones.com/products/textwrangler/download.html&lt;/a&gt;), which I installed next.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Set up the global configurations for git by typing the following lines into terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config --global user.name &lt;span class=&quot;s2&quot;&gt;&quot;first last&quot;&lt;/span&gt;
git config --global user.email &lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where “first last” are replaced with your first and last name (“Stephanie Spielman” for me), and the “email” is replaced with your email.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;4.&lt;/strong&gt; Install Homebrew, a convenient and comprehensive Mac package manager. Personally, I do prefer homebrew over MacPorts or other package managers, although I have no real basis for this preference. If MacPorts or other is your thing, then the next few steps might not be so helpful.
&lt;br /&gt;To get homebrew, enter this code into the command line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ruby -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that you might need to “sudo” that command. Also, if you ever want to update your homebrew, use this command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew update&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;5.&lt;/strong&gt; While Mac does come with its own python distribution, this distribution tends to get wonky when dealing with python modules. In the past, I’ve had some really annoyances trying to get numpy and scipy running properly, so I abandoned Mac’s python in favor of homebrew’s.
So, once homebrew is installed (it will be in “/usr/local/Cellar/”), use it to download their python version. To make sure that, when using the python interpretter, that you can freely press the up/down/left/right arrows without annoying characters appearing, install readline first!:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install readline --universal
brew install python&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default, this will give you python-2.7. If you want python3, use this command instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install python3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;6.&lt;/strong&gt; Next, just to make sure that Mac’s python doesn’t interfere with homebrew’s, enter these commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /System/Library/Frameworks/Python.framework/Versions
sudo rm Current
&lt;span class=&quot;c&quot;&gt;# Note that the &quot;2.7.9&quot; below will need to be replaced if its not the version on your system!&lt;/span&gt;
sudo ln -s /usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/Current&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;7.&lt;/strong&gt; Homebrew’s python comes with pip, which you can use to download various libraries. Here’s what I did:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pip install numpy
pip install scipy
pip install &lt;span class=&quot;s2&quot;&gt;&quot;ipython[notebook]&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# install iPython and notebook&lt;/span&gt;
pip install ipython --upgrade   &lt;span class=&quot;c&quot;&gt;# the above command does not seem to install most recent iPython, so this line fixes that issue&lt;/span&gt;
pip install pandas&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;8.&lt;/strong&gt; Unfortunately, you can’t get Biopython with pip, so you have to download from source. You can get Biopython from this website: &lt;a href=&quot;http://biopython.org/wiki/Download&quot;&gt;http://biopython.org/wiki/Download&lt;/a&gt;. Download either biopython-1.65.zip or biopython-1.65.tar.gz, uncompress, and navigate to the directory. Once in the biopython directory, enter the following in terminal to install Biopython:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python setup.py build
sudo python setup.py install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;9.&lt;/strong&gt; Pandoc, a package for converting file formats (often from markdown or ipython notebook to html or pdf, etc.), is an especially useful thing to have around. Download from the website: &lt;a href=&quot;https://github.com/jgm/pandoc/releases&quot;&gt;https://github.com/jgm/pandoc/releases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;10.&lt;/strong&gt; If you want to convert to pdf, though, you’ll need LaTeX on your system (surprisingly enough, if you want to use LaTeX for anything else, you’ll still need LaTeX!). For this, you have to download MacTex (from this website: &lt;a href=&quot;https://tug.org/mactex/downloading.html&quot;&gt;https://tug.org/mactex/downloading.html&lt;/a&gt;). This will give you a convenient installer which guides you through the process. The package is super big though (2.4 GB), so if you internet is not lightning-speed, this might be a good time for a coffee break!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;11.&lt;/strong&gt; Next, we’ll get R up and running. This is pretty straightforward - just download the R package installer (the one for Mavericks!) from this website: &lt;a href=&quot;http://www.r-project.org&quot;&gt;http://www.r-project.org&lt;/a&gt;. I recommend against building from source, since this requires a fortran compiler, and as previously mentioned, you’ll have to get this running on your own - this link should do it: &lt;a href=&quot;[http://r.research.att.com/libs/gfortran-4.8.2-darwin13.tar.bz2]&quot;&gt;http://r.research.att.com/libs/gfortran-4.8.2-darwin13.tar.bz2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;12.&lt;/strong&gt; Download, if you want, RStudio from this website: &lt;a href=&quot;http://www.rstudio.com&quot;&gt;http://www.rstudio.com&lt;/a&gt;. You’ll also need XQuartz, which you can download from this website: &lt;a href=&quot;http://xquartz.macosforge.org/landing/&quot;&gt;http://xquartz.macosforge.org/landing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;13.&lt;/strong&gt; Once R is running, you can install any packages you’ll need. I ran the following commands in R for installation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dplyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tidyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ggplot2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cowplot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# for sexier ggplot-ing
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ape&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# for phylogeny manipulation
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lme4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modeling&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
And now, for the most part, you have a functioning biocomputing environment for git, Python, and R!&lt;/p&gt;</content><author><name>Stephanie J. Spielman, PhD</name></author><summary type="html">If you are having issues with El Capitan, you may want to check out this blog post or this blog post instead!</summary></entry></feed>